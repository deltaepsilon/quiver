/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/router';

import { MDCButton as MdcButton } from './components/mdc-button/mdl-button';

interface HTMLMdcButtonElement extends MdcButton, HTMLElement {
}
declare var HTMLMdcButtonElement: {
  prototype: HTMLMdcButtonElement;
  new (): HTMLMdcButtonElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "mdc-button": HTMLMdcButtonElement;
  }
  interface ElementTagNameMap {
      "mdc-button": HTMLMdcButtonElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "mdc-button": JSXElements.MdcButtonAttributes;
      }
  }
  namespace JSXElements {
      export interface MdcButtonAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          icon?: boolean,
          raised?: boolean,
          unelevated?: boolean,
          stroked?: boolean,
          dense?: boolean,
          compact?: boolean,
          disabled?: boolean,
          ripple?: boolean
      }
  }
}

import { MDCMaterial as MdcMaterial } from './components/mdc-material/mdc-material';

interface HTMLMdcMaterialElement extends MdcMaterial, HTMLElement {
}
declare var HTMLMdcMaterialElement: {
  prototype: HTMLMdcMaterialElement;
  new (): HTMLMdcMaterialElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "mdc-material": HTMLMdcMaterialElement;
  }
  interface ElementTagNameMap {
      "mdc-material": HTMLMdcMaterialElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "mdc-material": JSXElements.MdcMaterialAttributes;
      }
  }
  namespace JSXElements {
      export interface MdcMaterialAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          elevation?: number,
          transition?: boolean,
          padding?: boolean
      }
  }
}

import { MyName as MyName } from './components/my-name/my-name';

interface HTMLMyNameElement extends MyName, HTMLElement {
}
declare var HTMLMyNameElement: {
  prototype: HTMLMyNameElement;
  new (): HTMLMyNameElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-name": HTMLMyNameElement;
  }
  interface ElementTagNameMap {
      "my-name": HTMLMyNameElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-name": JSXElements.MyNameAttributes;
      }
  }
  namespace JSXElements {
      export interface MyNameAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          first?: string,
          last?: string
      }
  }
}

